ðŸ“Š CLEAN TOOL INVENTORY REPORT
==============================

ðŸ“‹ CUSTOM TOOLS (4):
   â€¢ read_project_file: Read a file from the syndicate-js project directory
   â€¢ write_project_file: Write content to a file in the syndicate-js project
   â€¢ run_command: Execute a shell command and return the output
   â€¢ get_env_var: Get an environment variable value

ðŸ”— MCP TOOLS (28):
   â€¢ filesystem.read_file: Read the complete contents of a file from the file system. Handles various text encodings and provides detailed error messages if the file cannot be read. Use this tool when you need to examine the contents of a single file. Use the 'head' parameter to read only the first N lines of a file, or the 'tail' parameter to read only the last N lines of a file. Only works within allowed directories.
   â€¢ filesystem.read_multiple_files: Read the contents of multiple files simultaneously. This is more efficient than reading files one by one when you need to analyze or compare multiple files. Each file's content is returned with its path as a reference. Failed reads for individual files won't stop the entire operation. Only works within allowed directories.
   â€¢ filesystem.write_file: Create a new file or completely overwrite an existing file with new content. Use with caution as it will overwrite existing files without warning. Handles text content with proper encoding. Only works within allowed directories.
   â€¢ filesystem.edit_file: Make line-based edits to a text file. Each edit replaces exact line sequences with new content. Returns a git-style diff showing the changes made. Only works within allowed directories.
   â€¢ filesystem.create_directory: Create a new directory or ensure a directory exists. Can create multiple nested directories in one operation. If the directory already exists, this operation will succeed silently. Perfect for setting up directory structures for projects or ensuring required paths exist. Only works within allowed directories.
   â€¢ filesystem.list_directory: Get a detailed listing of all files and directories in a specified path. Results clearly distinguish between files and directories with [FILE] and [DIR] prefixes. This tool is essential for understanding directory structure and finding specific files within a directory. Only works within allowed directories.
   â€¢ filesystem.list_directory_with_sizes: Get a detailed listing of all files and directories in a specified path, including sizes. Results clearly distinguish between files and directories with [FILE] and [DIR] prefixes. This tool is useful for understanding directory structure and finding specific files within a directory. Only works within allowed directories.
   â€¢ filesystem.directory_tree: Get a recursive tree view of files and directories as a JSON structure. Each entry includes 'name', 'type' (file/directory), and 'children' for directories. Files have no children array, while directories always have a children array (which may be empty). The output is formatted with 2-space indentation for readability. Only works within allowed directories.
   â€¢ filesystem.move_file: Move or rename files and directories. Can move files between directories and rename them in a single operation. If the destination exists, the operation will fail. Works across different directories and can be used for simple renaming within the same directory. Both source and destination must be within allowed directories.
   â€¢ filesystem.search_files: Recursively search for files and directories matching a pattern. Searches through all subdirectories from the starting path. The search is case-insensitive and matches partial names. Returns full paths to all matching items. Great for finding files when you don't know their exact location. Only searches within allowed directories.
   â€¢ filesystem.get_file_info: Retrieve detailed metadata about a file or directory. Returns comprehensive information including size, creation time, last modified time, permissions, and type. This tool is perfect for understanding file characteristics without reading the actual content. Only works within allowed directories.
   â€¢ filesystem.list_allowed_directories: Returns the list of directories that this server is allowed to access. Use this to understand which directories are available before trying to access files.
   â€¢ sequential-thinking.sequentialthinking: A detailed tool for dynamic and reflective problem-solving through thoughts.
This tool helps analyze problems through a flexible thinking process that can adapt and evolve.
Each thought can build on, question, or revise previous insights as understanding deepens.

When to use this tool:
- Breaking down complex problems into steps
- Planning and design with room for revision
- Analysis that might need course correction
- Problems where the full scope might not be clear initially
- Problems that require a multi-step solution
- Tasks that need to maintain context over multiple steps
- Situations where irrelevant information needs to be filtered out

Key features:
- You can adjust total_thoughts up or down as you progress
- You can question or revise previous thoughts
- You can add more thoughts even after reaching what seemed like the end
- You can express uncertainty and explore alternative approaches
- Not every thought needs to build linearly - you can branch or backtrack
- Generates a solution hypothesis
- Verifies the hypothesis based on the Chain of Thought steps
- Repeats the process until satisfied
- Provides a correct answer

Parameters explained:
- thought: Your current thinking step, which can include:
* Regular analytical steps
* Revisions of previous thoughts
* Questions about previous decisions
* Realizations about needing more analysis
* Changes in approach
* Hypothesis generation
* Hypothesis verification
- next_thought_needed: True if you need more thinking, even if at what seemed like the end
- thought_number: Current number in sequence (can go beyond initial total if needed)
- total_thoughts: Current estimate of thoughts needed (can be adjusted up/down)
- is_revision: A boolean indicating if this thought revises previous thinking
- revises_thought: If is_revision is true, which thought number is being reconsidered
- branch_from_thought: If branching, which thought number is the branching point
- branch_id: Identifier for the current branch (if any)
- needs_more_thoughts: If reaching end but realizing more thoughts needed

You should:
1. Start with an initial estimate of needed thoughts, but be ready to adjust
2. Feel free to question or revise previous thoughts
3. Don't hesitate to add more thoughts if needed, even at the "end"
4. Express uncertainty when present
5. Mark thoughts that revise previous thinking or branch into new paths
6. Ignore information that is irrelevant to the current step
7. Generate a solution hypothesis when appropriate
8. Verify the hypothesis based on the Chain of Thought steps
9. Repeat the process until satisfied with the solution
10. Provide a single, ideally correct answer as the final output
11. Only set next_thought_needed to false when truly done and a satisfactory answer is reached
   â€¢ tavily-search.tavily-search: A powerful web search tool that provides comprehensive, real-time results using Tavily's AI search engine. Returns relevant web content with customizable parameters for result count, content type, and domain filtering. Ideal for gathering current information, news, and detailed web content analysis.
   â€¢ tavily-search.tavily-extract: A powerful web content extraction tool that retrieves and processes raw content from specified URLs, ideal for data collection, content analysis, and research tasks.
   â€¢ tavily-search.tavily-crawl: A powerful web crawler that initiates a structured web crawl starting from a specified base URL. The crawler expands from that point like a tree, following internal links across pages. You can control how deep and wide it goes, and guide it to focus on specific sections of the site.
   â€¢ tavily-search.tavily-map: A powerful web mapping tool that creates a structured map of website URLs, allowing you to discover and analyze site structure, content organization, and navigation paths. Perfect for site audits, content discovery, and understanding website architecture.
   â€¢ obsidian.create-note: Create a new note in the specified vault with markdown content.

Examples:
- Root note: { "vault": "vault1", "filename": "note.md" }
- Subfolder note: { "vault": "vault2", "filename": "note.md", "folder": "journal/2024" }
- INCORRECT: { "filename": "journal/2024/note.md" } (don't put path in filename)
   â€¢ obsidian.list-available-vaults: Lists all available vaults that can be used with other tools
   â€¢ obsidian.edit-note: Edit an existing note in the specified vault.

    There is a limited and discrete list of supported operations:
    - append: Appends content to the end of the note
    - prepend: Prepends content to the beginning of the note
    - replace: Replaces the entire content of the note

Examples:
- Root note: { "vault": "vault1", "filename": "note.md", "operation": "append", "content": "new content" }
- Subfolder note: { "vault": "vault2", "filename": "note.md", "folder": "journal/2024", "operation": "append", "content": "new content" }
- INCORRECT: { "filename": "journal/2024/note.md" } (don't put path in filename)
   â€¢ obsidian.search-vault: Search for specific content within vault notes (NOT for listing available vaults - use the list-vaults prompt for that).

This tool searches through note contents and filenames for specific text or tags:
- Content search: { "vault": "vault1", "query": "hello world", "searchType": "content" }
- Filename search: { "vault": "vault2", "query": "meeting-notes", "searchType": "filename" }
- Search both: { "vault": "vault1", "query": "project", "searchType": "both" }
- Tag search: { "vault": "vault2", "query": "tag:status/active" }
- Search in subfolder: { "vault": "vault1", "query": "hello", "path": "journal/2024" }

Note: To get a list of available vaults, use the list-vaults prompt instead of this search tool.
   â€¢ obsidian.move-note: Move/rename a note while preserving links
   â€¢ obsidian.create-directory: Create a new directory in the specified vault
   â€¢ obsidian.delete-note: Delete a note, moving it to .trash by default or permanently deleting if specified
   â€¢ obsidian.add-tags: Add tags to notes in frontmatter and/or content.

Examples:
- Add to both locations: { "files": ["note.md"], "tags": ["status/active"] }
- Add to frontmatter only: { "files": ["note.md"], "tags": ["project/docs"], "location": "frontmatter" }
- Add to start of content: { "files": ["note.md"], "tags": ["type/meeting"], "location": "content", "position": "start" }
   â€¢ obsidian.remove-tags: Remove tags from notes in frontmatter and/or content.

Examples:
- Simple: { "files": ["note.md"], "tags": ["project", "status"] }
- With hierarchy: { "files": ["note.md"], "tags": ["work/active", "priority/high"] }
- With options: { "files": ["note.md"], "tags": ["status"], "options": { "location": "frontmatter" } }
- Pattern matching: { "files": ["note.md"], "options": { "patterns": ["status/*"] } }
- INCORRECT: { "tags": ["#project"] } (don't include # symbol)
   â€¢ obsidian.rename-tag: Safely renames tags throughout the vault while preserving hierarchies.

Examples:
- Simple rename: { "oldTag": "project", "newTag": "projects" }
- Rename with hierarchy: { "oldTag": "work/active", "newTag": "projects/current" }
- With options: { "oldTag": "status", "newTag": "state", "normalize": true, "createBackup": true }
- INCORRECT: { "oldTag": "#project" } (don't include # symbol)
   â€¢ obsidian.read-note: Read the content of an existing note in the vault.

Examples:
- Root note: { "vault": "vault1", "filename": "note.md" }
- Subfolder note: { "vault": "vault1", "filename": "note.md", "folder": "journal/2024" }
- INCORRECT: { "filename": "journal/2024/note.md" } (don't put path in filename)

ðŸ¤– OPENAI BUILT-IN TOOLS (3):

âœ¨ TOTAL AVAILABLE TOOLS: 35
